heat_template_version: 2014-10-16

description: >
  This is a nested stack that defines a single Kubernetes minion, This stack is
  included by an AutoScalingGroup resource in the parent template
  (kubecluster.yaml).

parameters:

  server_image:
    type: string
    description: glance image used to boot the server

  minion_flavor:
    type: string
    default: m1.small
    description: flavor to use when booting the server

  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server
    default: lars

  external_network:
    type: string
    description: uuid/name of a network to use for floating ip addresses

  token_kubelet:
    type: string
    description: Token used by kubelet

  token_kube_proxy:
    type: string
    description: Token used by kube-proxy

  # The following are all generated in the parent template.
  kube_master_ip:
    type: string
    description: IP address of the Kubernetes master server.
  fixed_network:
    type: string
    description: Network from which to allocate fixed addresses.
  fixed_subnet:
    type: string
    description: Subnet from which to allocate fixed addresses.
  wait_condition_timeout:
    type: number
    description : >
      timeout for the Wait Conditions
  metadata:
    type: json
    description: metadata for ceilometer query
  cluster_name:
    type: string
  secgroup_base:
    type: string
  secgroup_node:
    type: string

  docker_registry_url:
    type: string
    description: Docker registry url
    default:

  docker_registry_prefix:
    type: string
    description: Docker registry prefix for k8s images
    default:

resources:


  ######################################################################
  #
  # software configs.  these are components that are combined into
  # a multipart MIME user-data archive.
  #

  write_heat_params:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/write-heat-params.yaml}
          params:
            "$MASTER_IP": {get_param: kube_master_ip}
            "$ROLE": "node"
            "$DOCKER_REGISTRY_URL": {get_param: docker_registry_url}
            "$DOCKER_REGISTRY_PREFIX": {get_param: docker_registry_prefix}

  kube_user:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: {get_file: fragments/kube-user.yaml}

  provision_node:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config: |
            #!/bin/bash
            set -e
            yum install git -y
            tee /etc/yum.repos.d/docker.repo <<-'EOF'
            [dockerrepo]
            name=Docker Repository
            baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/
            enabled=1
            gpgcheck=1
            gpgkey=https://yum.dockerproject.org/gpg
            EOF
            usermod -aG docker minion
            service docker start
            git clone https://github.com/kubernetes/kube-deploy.git


  pre_tasks:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/custom-scripts.sh}
          params:
            "$CUSTOM_SCRIPTS_PATH": "/usr/local/pre-scripts"

  post_tasks:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/custom-scripts.sh}
          params:
            "$CUSTOM_SCRIPTS_PATH": "/usr/local/post-scripts"

  kube_minion_init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
        - config: {get_resource: write_heat_params}
        - config: {get_resource: kube_user}
        - config: {get_resource: provision_node}

  ######################################################################
  #
  # a single kubernetes minion.
  #
  server_name_post_fix:
    type: OS::Heat::RandomString
    properties:
      length: 8

  kube_minion:
    type: OS::Nova::Server
    properties:
      image: {get_param: server_image}
      flavor: {get_param: minion_flavor}
      key_name: {get_param: ssh_key_name}
      metadata: {get_param: metadata}
      user_data_format: RAW
      user_data: {get_resource: kube_minion_init}
      networks:
        - port: {get_resource: kube_minion_eth0}
      name:
        list_join: [-, [{get_param: cluster_name}, node, {get_resource: server_name_post_fix}]]

  kube_minion_eth0:
    type: OS::Neutron::Port
    properties:
      network: {get_param: fixed_network}
      security_groups:
        - {get_param: secgroup_base}
        - {get_param: secgroup_node}
      fixed_ips:
        - subnet: {get_param: fixed_subnet}
      allowed_address_pairs:
        - ip_address: 10.246.0.0/16
      replacement_policy: AUTO

  kube_minion_floating:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_resource: kube_minion_eth0}

outputs:

  kube_minion_ip:
    value: {get_attr: [kube_minion_eth0, fixed_ips, 0, ip_address]}
  kube_minion_external_ip:
    value: {get_attr: [kube_minion_floating, floating_ip_address]}
